/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef, useState } from "react";
import { useAnimations, useFBX, useGLTF, useHelper } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import { Cell } from "./Cellphone";
import * as THREE from "three";

export function Avatar(props) {
  const { animation, follow } = props;
  const group = useRef();
  const parts = useRef([]);
  const mousePos = useRef();
  const [showCell, setShowCell] = useState(false);

  const cell = useRef();

  const { nodes, materials } = useGLTF("models/656de615165ecd09dead6c6c.glb");

  const { animations: typingAnimation } = useFBX("animations/Typing.fbx");
  const { animations: idleAnimation } = useFBX("animations/Idle.fbx");
  const { animations: talkingAnimation } = useFBX("animations/Talking.fbx");

  typingAnimation[0].name = "Typing";
  idleAnimation[0].name = "Idle";
  talkingAnimation[0].name = "Talking";

  const { actions } = useAnimations(
    [typingAnimation[0], idleAnimation[0], talkingAnimation[0]],
    group
  );

  // useHelper(group, THREE.BoxHelper, "red");

  useFrame((state, delta) => {
    if (animation === "Idle") {
      if (!mousePos.current) return;
      if (!follow) return;
      const target = new THREE.Vector3(
        (mousePos.current.x / document.documentElement.offsetWidth) * 3 - 0.5,
        -mousePos.current.y / document.documentElement.offsetHeight + 2,
        3
      );
      const head = group.current.getObjectByName("Head");
      head.lookAt(target);
    }
    if (animation === "Talking") {
      const handPos = new THREE.Vector3();
      const handDir = new THREE.Quaternion();

      // group.current.getObjectByName("RightHand").getWorldPosition(hand);
      const hand = group.current.getObjectByName("RightHand");
      hand.localToWorld(handPos);
      hand.getWorldQuaternion(handDir);

      const rotation = new THREE.Euler().setFromQuaternion(handDir);
      cell.current.rotation.x = rotation.x;
      cell.current.rotation.y = rotation.y;
      cell.current.rotation.z = rotation.z;

      cell.current.position.z = handPos.z;
      cell.current.position.x = handPos.x;
      cell.current.position.y = handPos.y;
    }
  });

  useEffect(() => {
    actions[animation].reset().fadeIn(0.5).play();
    if (animation !== "Talking") {
      setShowCell(false);
    }
    if (animation === "Talking") {
      setTimeout(() => {
        setShowCell(true);
      }, 1200);
    }
    return () => {
      actions[animation].fadeOut(0.5);
    };
  }, [animation]);

  useEffect(() => {
    actions[animation].reset().play();
    window.addEventListener("mousemove", (e) => {
      mousePos.current = { x: e.x, y: e.y };
    });
    return () => {
      window.removeEventListener("mousemove");
    };
  }, []);

  return (
    <group>
      <group visible={showCell} ref={cell}>
        <Cell />
      </group>
      <group ref={group} dispose={null}>
        <primitive object={nodes.Hips} />

        <skinnedMesh
          name="EyeLeft"
          frustumCulled={false}
          geometry={nodes.EyeLeft.geometry}
          material={materials.Wolf3D_Eye}
          skeleton={nodes.EyeLeft.skeleton}
          morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
          morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
        />
        <skinnedMesh
          name="EyeRight"
          frustumCulled={false}
          geometry={nodes.EyeRight.geometry}
          material={materials.Wolf3D_Eye}
          skeleton={nodes.EyeRight.skeleton}
          morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
          morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
        />
        <skinnedMesh
          name="Wolf3D_Head"
          frustumCulled={false}
          geometry={nodes.Wolf3D_Head.geometry}
          material={materials.Wolf3D_Skin}
          skeleton={nodes.Wolf3D_Head.skeleton}
          morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
          morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
        />
        <skinnedMesh
          name="Wolf3D_Teeth"
          frustumCulled={false}
          geometry={nodes.Wolf3D_Teeth.geometry}
          material={materials.Wolf3D_Teeth}
          skeleton={nodes.Wolf3D_Teeth.skeleton}
          morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
          morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
        />
        <skinnedMesh
          frustumCulled={false}
          geometry={nodes.Wolf3D_Hair.geometry}
          material={materials.Wolf3D_Hair}
          skeleton={nodes.Wolf3D_Hair.skeleton}
        />
        <skinnedMesh
          name="Wolf3D_Outfit_Top"
          frustumCulled={false}
          geometry={nodes.Wolf3D_Outfit_Top.geometry}
          material={materials.Wolf3D_Outfit_Top}
          skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
          morphTargetDictionary={nodes.Wolf3D_Outfit_Top.morphTargetDictionary}
          morphTargetInfluences={nodes.Wolf3D_Outfit_Top.morphTargetInfluences}
        />
        <skinnedMesh
          name="Wolf3D_Outfit_Bottom"
          frustumCulled={false}
          geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
          material={materials.Wolf3D_Outfit_Bottom}
          skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
          morphTargetDictionary={
            nodes.Wolf3D_Outfit_Bottom.morphTargetDictionary
          }
          morphTargetInfluences={
            nodes.Wolf3D_Outfit_Bottom.morphTargetInfluences
          }
        />
        <skinnedMesh
          name="Wolf3D_Outfit_Footwear"
          frustumCulled={false}
          geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
          material={materials.Wolf3D_Outfit_Footwear}
          skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
          morphTargetDictionary={
            nodes.Wolf3D_Outfit_Footwear.morphTargetDictionary
          }
          morphTargetInfluences={
            nodes.Wolf3D_Outfit_Footwear.morphTargetInfluences
          }
        />
        <skinnedMesh
          name="Wolf3D_Body"
          frustumCulled={false}
          geometry={nodes.Wolf3D_Body.geometry}
          material={materials.Wolf3D_Body}
          skeleton={nodes.Wolf3D_Body.skeleton}
          morphTargetDictionary={nodes.Wolf3D_Body.morphTargetDictionary}
          morphTargetInfluences={nodes.Wolf3D_Body.morphTargetInfluences}
        />
      </group>
    </group>
  );
}

useGLTF.preload("models/656de615165ecd09dead6c6c.glb");
